patient.metadata <- read.table(archivo.metadata, sep = '\t', header = TRUE)
civic <- read.table("/home/diegollarrull/workspace/oncosens/civic/20171101/01-Nov-2017-ClinicalEvidenceSummaries.tsv.csv", sep = '\t', strip.white=TRUE, header = TRUE)
civic[civic$reference_bases == "","reference_bases"] <- NA
civic[civic$variant_bases == "","variant_bases"]     <- NA
civic <- civic[civic$reference_build == "GRCh37",]
civic_bases <- civic[!is.na(civic$reference_bases) & (!is.na(civic$variant_bases)),]
civic_nobases <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) ,]
patient.findings.exact <- sqldf("select * from dd f1 inner join civic_bases f2
on (f1.CHROM == f2.chromosome
and f1.POS == f2.start
and f1.POS == f2.stop
and f1.REF == f2.reference_bases
and f1.ALT == f2.variant_bases) ")
patient.findings.range <- sqldf("select * from dd f1 inner join civic_nobases f2
on (f1.CHROM == f2.chromosome
and f1.POS >= f2.start
and f1.POS <= f2.stop) ")
patient.findings <- rbind(patient.findings.exact,patient.findings.range)
patient.findings$TYPE <- NULL
civic_amps <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) & (civic$variant == "AMPLIFICATION"),]
patient.findings.amplifications <- sqldf("select * from patient_amplifications f1 inner join civic_amps f2
on (f1.CHROM == f2.chromosome
and f1.START_POS == f2.start
and f1.STOP_POS == f2.stop
and f1.DRUGS == f2.drugs
and f2.disease LIKE ('%' || f1.DISEASE || '%'))")
if(dim(patient.findings)[1] > 0){
patient.findings$FACTOR <- NA
}
if(dim(patient.findings.amplifications)[1] > 0){
patient.findings.amplifications$POS <- NA
patient.findings.amplifications$REF <- NA
patient.findings.amplifications$ALT <- NA
patient.findings.amplifications$AF <- NA
patient.findings.amplifications$DRUGS <- NULL
patient.findings.amplifications$DISEASE <- NULL
patient.findings.amplifications$START_POS <- NULL
patient.findings.amplifications$STOP_POS <- NULL
patient.findings <- rbind(patient.findings, patient.findings.amplifications)
}
patient.findings.trusted <- patient.findings[patient.findings$rating >= 3,]
patient.findings.trusted.evidence <- patient.findings.trusted[patient.findings.trusted$evidence_level %in% c("A", "B"),]
# Override de filtro de Rating y Nivel de Evidencia
patient.findings.trusted.evidence <- patient.findings
View(dd)
#Función que convierte números al star system
cs_fun <- function(x){
switch(x,
"1"={"\\({*}\\)"},
"2"={"\\({*}{*}\\)"},
"3"={"\\({*}{*}{*}\\)"},
"4"={"\\({*}{*}{*}{*}\\)"},
"5"={"\\({*}{*}{*}{*}{*}\\)"}
)
}
#Función que divide
split_hgvs <- function(x){
if (nchar(x) > 30){
x <- gsub("(.*[0-9]+)([A-Z]+>[A-Z]+)","\\1\\\\\\\\\\2", x)
}
return(x)
}
check_field <- function(x){
if (grepl("NA",x)){
return("\\hspace{.1cm}")
}
return(x)
}
aa <- read.vcfR(archivo.vcf)
knitr::opts_chunk$set(echo = TRUE)
library("vcfR")
library("sqldf")
library("dplyr")
# Reemplazar por el ID del paciente
biopsia.liquida <- FALSE
tumor.15 <- TRUE
id.paciente <- "4729343"
path.base <- "/home/diegollarrull/workspace/oncosens/casos/"
crear_ruta <- function(sufijo){
paste0(path.base, id.paciente, "/", id.paciente, sufijo)
}
archivo.amplificaciones <- crear_ruta("_amplifications.tsv")
archivo.metadata        <- crear_ruta("_metadata.tsv")
archivo.vcf             <- crear_ruta(".vcf")
#Función que convierte números al star system
cs_fun <- function(x){
switch(x,
"1"={"\\({*}\\)"},
"2"={"\\({*}{*}\\)"},
"3"={"\\({*}{*}{*}\\)"},
"4"={"\\({*}{*}{*}{*}\\)"},
"5"={"\\({*}{*}{*}{*}{*}\\)"}
)
}
#Función que divide
split_hgvs <- function(x){
if (nchar(x) > 30){
x <- gsub("(.*[0-9]+)([A-Z]+>[A-Z]+)","\\1\\\\\\\\\\2", x)
}
return(x)
}
check_field <- function(x){
if (grepl("NA",x)){
return("\\hspace{.1cm}")
}
return(x)
}
aa <- read.vcfR(archivo.vcf)
dd <- data.frame(getFIX(aa))
dd <- dd[dd$FILTER == 'PASS',]
raw.vcf <- dd
afs <- extract.gt(aa, element = "AF")
afs <- data.frame(id_merge = rownames(afs), af = afs, row.names = NULL)
names(afs) <- c("id_merge", "AF")
dd$id_merge <- paste(dd$CHROM, dd$POS, sep = "_")
dd <- inner_join(dd,afs, by = "id_merge")
dd <- dd[,c("CHROM", "POS", "REF", "ALT", "AF")]
dd$CHROM <- gsub("chr", "", dd$CHROM)
dd$TYPE <- NA
dd$TYPE[as.numeric(dd$CHROM) == 17 & dd$POS == 7579414] <- "TRUNCATING MUTATION"
#dd <- dd[dd$AF < 0.55,]
patient_amplifications <- read.table(archivo.amplificaciones, sep = '\t', header = TRUE)
patient.metadata <- read.table(archivo.metadata, sep = '\t', header = TRUE)
civic <- read.table("/home/diegollarrull/workspace/oncosens/civic/20171101/01-Nov-2017-ClinicalEvidenceSummaries.tsv.csv", sep = '\t', strip.white=TRUE, header = TRUE)
civic[civic$reference_bases == "","reference_bases"] <- NA
civic[civic$variant_bases == "","variant_bases"]     <- NA
civic <- civic[civic$reference_build == "GRCh37",]
civic_bases <- civic[!is.na(civic$reference_bases) & (!is.na(civic$variant_bases)),]
civic_nobases <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) ,]
View(dd)
#Función que convierte números al star system
cs_fun <- function(x){
switch(x,
"1"={"\\({*}\\)"},
"2"={"\\({*}{*}\\)"},
"3"={"\\({*}{*}{*}\\)"},
"4"={"\\({*}{*}{*}{*}\\)"},
"5"={"\\({*}{*}{*}{*}{*}\\)"}
)
}
#Función que divide
split_hgvs <- function(x){
if (nchar(x) > 30){
x <- gsub("(.*[0-9]+)([A-Z]+>[A-Z]+)","\\1\\\\\\\\\\2", x)
}
return(x)
}
check_field <- function(x){
if (grepl("NA",x)){
return("\\hspace{.1cm}")
}
return(x)
}
aa <- read.vcfR(archivo.vcf)
dd <- data.frame(getFIX(aa))
dd <- dd[dd$FILTER == 'PASS',]
raw.vcf <- dd
afs <- extract.gt(aa, element = "AF")
afs <- data.frame(id_merge = rownames(afs), af = afs, row.names = NULL)
names(afs) <- c("id_merge", "AF")
dd$id_merge <- paste(dd$CHROM, dd$POS, sep = "_")
dd <- inner_join(dd,afs, by = "id_merge")
dd <- dd[,c("CHROM", "POS", "REF", "ALT", "AF")]
dd$CHROM <- gsub("chr", "", dd$CHROM)
dd$TYPE <- NA
dd$TYPE[as.numeric(dd$CHROM) == 17 & dd$POS == 7579414] <- "TRUNCATING MUTATION"
dd2 <- dd[as.numeric(dd$AF) <= 0.55,]
patient_amplifications <- read.table(archivo.amplificaciones, sep = '\t', header = TRUE)
patient.metadata <- read.table(archivo.metadata, sep = '\t', header = TRUE)
civic <- read.table("/home/diegollarrull/workspace/oncosens/civic/20171101/01-Nov-2017-ClinicalEvidenceSummaries.tsv.csv", sep = '\t', strip.white=TRUE, header = TRUE)
civic[civic$reference_bases == "","reference_bases"] <- NA
civic[civic$variant_bases == "","variant_bases"]     <- NA
civic <- civic[civic$reference_build == "GRCh37",]
civic_bases <- civic[!is.na(civic$reference_bases) & (!is.na(civic$variant_bases)),]
civic_nobases <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) ,]
View(dd2)
View(dd)
summary(as.numeric(dd$AF))
summary(dd$AF)
summary(as.float(dd$AF))
summary(as.double(dd$AF))
summary(as.numeric(as.character(dd$AF)))
dd2 <- dd[as.numeric(as.character(dd$AF)) <= 0.55,]
patient.findings.exact <- sqldf("select * from dd f1 inner join civic_bases f2
on (f1.CHROM == f2.chromosome
and f1.POS == f2.start
and f1.POS == f2.stop
and f1.REF == f2.reference_bases
and f1.ALT == f2.variant_bases) ")
patient.findings.range <- sqldf("select * from dd f1 inner join civic_nobases f2
on (f1.CHROM == f2.chromosome
and f1.POS >= f2.start
and f1.POS <= f2.stop) ")
patient.findings <- rbind(patient.findings.exact,patient.findings.range)
patient.findings$TYPE <- NULL
civic_amps <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) & (civic$variant == "AMPLIFICATION"),]
patient.findings.amplifications <- sqldf("select * from patient_amplifications f1 inner join civic_amps f2
on (f1.CHROM == f2.chromosome
and f1.START_POS == f2.start
and f1.STOP_POS == f2.stop
and f1.DRUGS == f2.drugs
and f2.disease LIKE ('%' || f1.DISEASE || '%'))")
if(dim(patient.findings)[1] > 0){
patient.findings$FACTOR <- NA
}
if(dim(patient.findings.amplifications)[1] > 0){
patient.findings.amplifications$POS <- NA
patient.findings.amplifications$REF <- NA
patient.findings.amplifications$ALT <- NA
patient.findings.amplifications$AF <- NA
patient.findings.amplifications$DRUGS <- NULL
patient.findings.amplifications$DISEASE <- NULL
patient.findings.amplifications$START_POS <- NULL
patient.findings.amplifications$STOP_POS <- NULL
patient.findings <- rbind(patient.findings, patient.findings.amplifications)
}
patient.findings.trusted <- patient.findings[patient.findings$rating >= 3,]
patient.findings.trusted.evidence <- patient.findings.trusted[patient.findings.trusted$evidence_level %in% c("A", "B"),]
# Override de filtro de Rating y Nivel de Evidencia
patient.findings.trusted.evidence <- patient.findings
knitr::opts_chunk$set(echo = TRUE)
library("vcfR")
library("sqldf")
library("dplyr")
# Reemplazar por el ID del paciente
biopsia.liquida <- FALSE
tumor.15 <- TRUE
id.paciente <- "4729343"
path.base <- "/home/diegollarrull/workspace/oncosens/casos/"
crear_ruta <- function(sufijo){
paste0(path.base, id.paciente, "/", id.paciente, sufijo)
}
archivo.amplificaciones <- crear_ruta("_amplifications.tsv")
archivo.metadata        <- crear_ruta("_metadata.tsv")
archivo.vcf             <- crear_ruta(".vcf")
#Función que convierte números al star system
cs_fun <- function(x){
switch(x,
"1"={"\\({*}\\)"},
"2"={"\\({*}{*}\\)"},
"3"={"\\({*}{*}{*}\\)"},
"4"={"\\({*}{*}{*}{*}\\)"},
"5"={"\\({*}{*}{*}{*}{*}\\)"}
)
}
#Función que divide
split_hgvs <- function(x){
if (nchar(x) > 30){
x <- gsub("(.*[0-9]+)([A-Z]+>[A-Z]+)","\\1\\\\\\\\\\2", x)
}
return(x)
}
check_field <- function(x){
if (grepl("NA",x)){
return("\\hspace{.1cm}")
}
return(x)
}
aa <- read.vcfR(archivo.vcf)
dd <- data.frame(getFIX(aa))
dd <- dd[dd$FILTER == 'PASS',]
raw.vcf <- dd
afs <- extract.gt(aa, element = "AF")
afs <- data.frame(id_merge = rownames(afs), af = afs, row.names = NULL)
names(afs) <- c("id_merge", "AF")
dd$id_merge <- paste(dd$CHROM, dd$POS, sep = "_")
dd <- inner_join(dd,afs, by = "id_merge")
dd <- dd[,c("CHROM", "POS", "REF", "ALT", "AF")]
dd$CHROM <- gsub("chr", "", dd$CHROM)
dd$TYPE <- NA
dd$TYPE[as.numeric(dd$CHROM) == 17 & dd$POS == 7579414] <- "TRUNCATING MUTATION"
dd <- dd[as.numeric(as.character(dd$AF)) <= 0.55,]
patient_amplifications <- read.table(archivo.amplificaciones, sep = '\t', header = TRUE)
patient.metadata <- read.table(archivo.metadata, sep = '\t', header = TRUE)
civic <- read.table("/home/diegollarrull/workspace/oncosens/civic/20171101/01-Nov-2017-ClinicalEvidenceSummaries.tsv.csv", sep = '\t', strip.white=TRUE, header = TRUE)
civic[civic$reference_bases == "","reference_bases"] <- NA
civic[civic$variant_bases == "","variant_bases"]     <- NA
civic <- civic[civic$reference_build == "GRCh37",]
civic_bases <- civic[!is.na(civic$reference_bases) & (!is.na(civic$variant_bases)),]
civic_nobases <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) ,]
patient.findings.exact <- sqldf("select * from dd f1 inner join civic_bases f2
on (f1.CHROM == f2.chromosome
and f1.POS == f2.start
and f1.POS == f2.stop
and f1.REF == f2.reference_bases
and f1.ALT == f2.variant_bases) ")
patient.findings.range <- sqldf("select * from dd f1 inner join civic_nobases f2
on (f1.CHROM == f2.chromosome
and f1.POS >= f2.start
and f1.POS <= f2.stop) ")
patient.findings <- rbind(patient.findings.exact,patient.findings.range)
patient.findings$TYPE <- NULL
civic_amps <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) & (civic$variant == "AMPLIFICATION"),]
patient.findings.amplifications <- sqldf("select * from patient_amplifications f1 inner join civic_amps f2
on (f1.CHROM == f2.chromosome
and f1.START_POS == f2.start
and f1.STOP_POS == f2.stop
and f1.DRUGS == f2.drugs
and f2.disease LIKE ('%' || f1.DISEASE || '%'))")
if(dim(patient.findings)[1] > 0){
patient.findings$FACTOR <- NA
}
if(dim(patient.findings.amplifications)[1] > 0){
patient.findings.amplifications$POS <- NA
patient.findings.amplifications$REF <- NA
patient.findings.amplifications$ALT <- NA
patient.findings.amplifications$AF <- NA
patient.findings.amplifications$DRUGS <- NULL
patient.findings.amplifications$DISEASE <- NULL
patient.findings.amplifications$START_POS <- NULL
patient.findings.amplifications$STOP_POS <- NULL
patient.findings <- rbind(patient.findings, patient.findings.amplifications)
}
patient.findings.trusted <- patient.findings[patient.findings$rating >= 3,]
patient.findings.trusted.evidence <- patient.findings.trusted[patient.findings.trusted$evidence_level %in% c("A", "B"),]
# Override de filtro de Rating y Nivel de Evidencia
patient.findings.trusted.evidence <- patient.findings
View(patient.findings)
knitr::opts_chunk$set(echo = TRUE)
library("vcfR")
library("sqldf")
library("dplyr")
# Reemplazar por el ID del paciente
biopsia.liquida <- FALSE
tumor.15 <- TRUE
id.paciente <- "4735514"
path.base <- "/home/diegollarrull/workspace/oncosens/casos/"
crear_ruta <- function(sufijo){
paste0(path.base, id.paciente, "/", id.paciente, sufijo)
}
archivo.amplificaciones <- crear_ruta("_amplifications.tsv")
archivo.metadata        <- crear_ruta("_metadata.tsv")
archivo.vcf             <- crear_ruta(".vcf")
#Función que convierte números al star system
cs_fun <- function(x){
switch(x,
"1"={"\\({*}\\)"},
"2"={"\\({*}{*}\\)"},
"3"={"\\({*}{*}{*}\\)"},
"4"={"\\({*}{*}{*}{*}\\)"},
"5"={"\\({*}{*}{*}{*}{*}\\)"}
)
}
#Función que divide
split_hgvs <- function(x){
if (nchar(x) > 30){
x <- gsub("(.*[0-9]+)([A-Z]+>[A-Z]+)","\\1\\\\\\\\\\2", x)
}
return(x)
}
check_field <- function(x){
if (grepl("NA",x)){
return("\\hspace{.1cm}")
}
return(x)
}
aa <- read.vcfR(archivo.vcf)
dd <- data.frame(getFIX(aa))
dd <- dd[dd$FILTER == 'PASS',]
raw.vcf <- dd
afs <- extract.gt(aa, element = "AF")
afs <- data.frame(id_merge = rownames(afs), af = afs, row.names = NULL)
names(afs) <- c("id_merge", "AF")
dd$id_merge <- paste(dd$CHROM, dd$POS, sep = "_")
dd <- inner_join(dd,afs, by = "id_merge")
dd <- dd[,c("CHROM", "POS", "REF", "ALT", "AF")]
dd$CHROM <- gsub("chr", "", dd$CHROM)
dd$TYPE <- NA
dd$TYPE[as.numeric(dd$CHROM) == 17 & dd$POS == 7579414] <- "TRUNCATING MUTATION"
patient_amplifications <- read.table(archivo.amplificaciones, sep = '\t', header = TRUE)
patient.metadata <- read.table(archivo.metadata, sep = '\t', header = TRUE)
civic <- read.table("/home/diegollarrull/workspace/oncosens/civic/20171101/01-Nov-2017-ClinicalEvidenceSummaries.tsv.csv", sep = '\t', strip.white=TRUE, header = TRUE)
civic[civic$reference_bases == "","reference_bases"] <- NA
civic[civic$variant_bases == "","variant_bases"]     <- NA
civic <- civic[civic$reference_build == "GRCh37",]
civic_bases <- civic[!is.na(civic$reference_bases) & (!is.na(civic$variant_bases)),]
civic_nobases <- civic[is.na(civic$reference_bases) & (is.na(civic$variant_bases)) & (grepl("TRUNCATING MUTATION", civic$variant)),]
View(patient.metadata)
cat(patient.metadata$INTERPRETACION)
patient.metadata$INTERPRETACION
patient.metadata$INTERPRETACION
a <- patient.metadata$INTERPRETACION
cat(a)
cat(a, sep = "")
cat(paste0("",a), sep = "")
cat(paste0("\\bodyfont \\normalsize ",patient.metadata$INTERPRETACION), sep = "")
cat(paste0("\\bodyfont \\normalsize \n",patient.metadata$INTERPRETACION), sep = "")
install.packages("sparklyr")
library(sparklyr)
spark_connect(master = "spark://192.168.70.75:10001")
spark_connect(master = "spark://192.168.70.75:10001", spark_home = "sftp://argentum/usr/bin/spark")
spark_connect(master = "spark://192.168.70.75:10001", spark_home = "sftp://argentum/usr/bin/spark", version = "2.2.0")
spark_connect(master = "spark://192.168.70.75:10001", spark_home = "/usr/bin/spark", version = "2.2.0")
shiny::runApp('workspace/heritas_talks/cordoba/code/01_basic_shiny')
library(plotly)
library(ggplot2)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
gp2 <- ggplot(midwest, aes(x = percollege))
+ geom_boxplot(fill = fill, color = state)
gp2
library(plotly)
library(ggplot2)
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
gp2 <- ggplot(midwest, aes(x = percollege))
+ geom_boxplot(color = state)
gp2
gp2 <- ggplot(midwest, aes(x = ~percollege))
+ geom_boxplot(color ~state)
gp2
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
gp2 <- ggplot(midwest, aes(x = ~percollege))
+ geom_boxplot()
gp2
gp2 <- ggplot(midwest, aes(x = percollege, y = levels(as.factor(percollege))))
+ geom_boxplot()
gp2
midwest
midwest$percollege
gp2 <- ggplot(midwest, aes(x = percollege, y = state))
+ geom_boxplot()
gp2
gp2 <- ggplot(midwest, aes(x = percollege, y = state)) + geom_boxplot()
gp2
p2 <- ggplotly(gp2)
p2
midwest$state
gp2 <- ggplot(midwest, aes(x= ~percollege, y = ~state)) + geom_boxplot()
gp2
gp2 <- ggplot(midwest, aes(x= percollege, y = state)) + geom_boxplot()
gp2
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
p
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot()
gp2
p2 <- ggplotly(gp2)
p2
p <- plot_ly(midwest, y = ~percollege, color = ~state, type = "box")
p
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot()
gp2
p2 <- ggplotly(gp2)
p2
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot(color = state)
gp2
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot(color = ~state)
gp2
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot(color = midwest$state)
gp2
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot() + scale_color_brewer()
gp2
gp2 <- ggplot(midwest, aes(y= percollege, x = state)) + geom_boxplot() + scale_fill_brewer()
gp2
p2 <- ggplotly(gp2)
p2
gp2 <- ggplot(midwest, aes(y= percollege, x = state, fill = state)) + geom_boxplot() + scale_fill_brewer()
gp2
p2 <- ggplotly(gp2)
p2
gp2 <- ggplot(midwest, aes(y= percollege, x = state, fill = state)) + geom_boxplot() + scale_fill_brewer(palette = "Set1")
gp2
p2 <- ggplotly(gp2)
p2
p <- plot_ly(midwest, y = ~percollege, color = ~state, type = "box")
p
p2 <- ggplotly(gp2)
p2
gp2 <- ggplot(midwest, aes(y= percollege, x = state, fill = state)) + geom_boxplot() + scale_fill_brewer(palette = "Pastel1")
gp2
p2 <- ggplotly(gp2)
p2
library(plotly)
library(ggplot2)
p <- plot_ly(midwest, y = ~percollege, color = ~state, type = "box")
p
gp2 <- ggplot(midwest, aes(y= percollege, x = state, fill = state)) + geom_boxplot() + scale_fill_brewer(palette = "Pastel1")
p2 <- ggplotly(gp2)
p2
gp2 <- ggplot(midwest, aes(y= percollege, x = state, fill = state)) + geom_boxplot() + scale_fill_brewer(palette = "Pastel1")
gp2
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
midwest$county
midwest$category
cars$speed
mtcars$mpg
mtcars$hp
mtcars$vs
mtcars$gear
mtcars$hp
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
runApp('workspace/heritas_talks/cordoba/code/03_basic_webapp')
names(mtcars)
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
runApp('workspace/heritas_talks/cordoba/code/04_more_complex_webapp')
